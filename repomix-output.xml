This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
agents/
  orchestrator.ts
  sandboxClient.ts
  scriptAgent.ts
  searchAgent.ts
  voiceAgent.ts
frontend/
  public/
    vite.svg
  src/
    assets/
      react.svg
    components/
      ui/
        button.tsx
    hooks/
      useGeminiAgent.ts
      useOrchestrator.ts
    lib/
      utils.ts
    App.css
    App.tsx
    index.css
    main.tsx
  .gitignore
  components.json
  eslint.config.js
  index.html
  package.json
  README.md
  tsconfig.app.json
  tsconfig.json
  tsconfig.node.json
  vite.config.ts
server/
  src/
    routes/
      geminiFn.ts
      health.ts
      logs.ts
      podcast.ts
    services/
      elevenlabs.ts
      gemini-tools.ts
      orchestrator.ts
      sandbox.ts
    tests/
      health.test.ts
    utils/
      config.ts
      logger.ts
      types.ts
    index.ts
  .env
  .gitignore
  package.json
  tsconfig.json
shared/
  types.ts
  utils.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="agents/orchestrator.ts">
import { searchNews } from './searchAgent'
import { generateScript } from './scriptAgent'
import { synthesizeVoice } from './voiceAgent'

export async function createPodcast(topic: string) {
  const news = await searchNews(topic)
  const script = await generateScript(news.stdout)
  const audio = await synthesizeVoice(script)
  return { script, audio }
}
</file>

<file path="agents/sandboxClient.ts">
import E2B from '@e2b/sdk'

export async function runInSandbox(code: string) {
  const sandbox = await E2B.Sandbox.create({ template: 'python3' })
  const { stdout, stderr } = await sandbox.runCode(code)
  await sandbox.close()
  return { stdout, stderr }
}
</file>

<file path="agents/scriptAgent.ts">
import { geminiFlash } from '../lib/gemini'

export async function generateScript(newsData: string) {
  return geminiFlash(`
    Write a podcast script with 2 speakers discussing:
    ${newsData}
  `)
}
</file>

<file path="agents/searchAgent.ts">
import { runInSandbox } from './sandboxClient'

export async function searchNews(topic: string) {
  const code = `
  import requests, json
  # call Tavily API here and print results
  `
  return runInSandbox(code)
}
</file>

<file path="agents/voiceAgent.ts">
import { elevenlabs } from '../lib/voice'

export async function synthesizeVoice(script: string) {
  const voices = ['Rachel', 'Elli']
  return elevenlabs.generate({ script, voices })
}
</file>

<file path="frontend/public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="frontend/src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="frontend/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
        "icon-sm": "size-8",
        "icon-lg": "size-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="frontend/src/hooks/useGeminiAgent.ts">
import { useState } from "react"

export function useGeminiAgent() {
  const [logs, setLogs] = useState<string[]>([])
  const [loading, setLoading] = useState(false)
  const [sandboxUrl, setSandboxUrl] = useState<string | null>(null)

  async function runTask(prompt: string) {
    setLogs([])
    setSandboxUrl(null)
    setLoading(true)

    const res = await fetch("/api/gemini-fn", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    })

    const reader = res.body?.getReader()
    const decoder = new TextDecoder()
    if (!reader) return

    while (true) {
      const { done, value } = await reader.read()
      if (done) break

      const chunk = decoder.decode(value)
      chunk.split("\n").forEach((line) => {
        if (!line.trim()) return

        if (line.includes("E2B Sandbox started:")) {
          const url = line.split("E2B Sandbox started:")[1].trim()
          if (url.startsWith("http")) setSandboxUrl(url)
        }

        setLogs((prev) => [...prev, line])
      })
    }

    setLoading(false)
  }

  return { logs, loading, sandboxUrl, runTask }
}
</file>

<file path="frontend/src/hooks/useOrchestrator.ts">
import { useState } from "react"

export function useOrchestrator() {
  const [logs, setLogs] = useState<string[]>([])
  const [sandboxUrl, setSandboxUrl] = useState<string | null>(null)
  const [loading, setLoading] = useState(false)

  async function runTask(prompt: string) {
    setLogs([])
    setSandboxUrl(null)
    setLoading(true)

    const res = await fetch("/api/task", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    })
    const reader = res.body?.getReader()
    const decoder = new TextDecoder()

    if (!reader) return
    while (true) {
      const { done, value } = await reader.read()
      if (done) break
      const chunk = decoder.decode(value)
      chunk.split("\n").forEach((line) => {
        if (line.startsWith("[SANDBOX]")) {
          setSandboxUrl(line.replace("[SANDBOX] ", ""))
        } else if (line.trim()) {
          setLogs((prev) => [...prev, line])
        }
      })
    }

    setLoading(false)
  }

  return { logs, sandboxUrl, loading, runTask }
}
</file>

<file path="frontend/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="frontend/src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="frontend/src/App.tsx">
import { useGeminiAgent } from "./hooks/useGeminiAgent"
import { useState } from "react"
import { Button } from "@/components/ui/button"

export default function App() {
  const { logs, loading, sandboxUrl, runTask } = useGeminiAgent()
  const [prompt, setPrompt] = useState("")

  return (
    <div className="flex flex-col items-center min-h-screen p-8 space-y-4">
      <h1 className="text-2xl font-bold">🔮 Tiny Runable AI Agent</h1>

      <div className="flex w-full max-w-xl space-x-2">
        <input
          className="flex-1 border rounded px-3 py-2"
          placeholder="Ask Gemini to run code..."
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && runTask(prompt)}
        />
        <Button disabled={loading} onClick={() => runTask(prompt)}>
          {loading ? "Running..." : "Run"}
        </Button>
      </div>

      <div className="bg-black text-green-400 font-mono p-4 rounded-lg w-full max-w-xl h-96 overflow-y-auto whitespace-pre-wrap">
        {logs.map((log, i) => (
          <div key={i}>{log}</div>
        ))}
      </div>

      {sandboxUrl && (
        <a
          href={sandboxUrl}
          target="_blank"
          rel="noreferrer"
          className="text-blue-400 underline"
        >
          Open E2B Sandbox Session
        </a>
      )}
    </div>
  )
}
</file>

<file path="frontend/src/index.css">
@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="frontend/src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="frontend/.gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="frontend/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "iconLibrary": "lucide",
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "registries": {}
}
</file>

<file path="frontend/eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="frontend/index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>frontend</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="frontend/package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.2.3",
    "@tailwindcss/vite": "^4.1.16",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.548.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "tailwind-merge": "^3.3.1",
    "tailwindcss": "^4.1.16"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/node": "^24.6.0",
    "@types/react": "^19.1.16",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.4",
    "eslint": "^9.36.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.22",
    "globals": "^16.4.0",
    "tw-animate-css": "^1.4.0",
    "typescript": "~5.9.3",
    "typescript-eslint": "^8.45.0",
    "vite": "^7.1.7"
  }
}
</file>

<file path="frontend/README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) (or [oxc](https://oxc.rs) when used in [rolldown-vite](https://vite.dev/guide/rolldown)) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## React Compiler

The React Compiler is not enabled on this template because of its impact on dev & build performances. To add it, see [this documentation](https://react.dev/learn/react-compiler/installation).

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="frontend/tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "types": ["vite/client"],
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="frontend/tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="frontend/tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "types": ["node"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="frontend/vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import path from 'path'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  server: {
    port: 5173,
    proxy: {
      "/api": {
        target: "http://localhost:3001", // your Hono server
        changeOrigin: true,
      },
    },
  },
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})
</file>

<file path="server/src/routes/geminiFn.ts">
import { Orchestrator } from "@/services/orchestrator.js"
import { Hono } from "hono"

const router = new Hono()

router.post("/api/gemini-fn", async (c) => {
  const { prompt } = await c.req.json()
  const orchestrator = new Orchestrator()

  const stream = new ReadableStream({
    async start(controller) {
      const send = (msg: string) =>
        controller.enqueue(new TextEncoder().encode(`${msg}\n`))

      send(`[LOG] Received: ${prompt}`)

      const result = await orchestrator.executeWithFunctionCalling(prompt, {
        onLog: send,
      })

      send(`[COMPLETE] ${result}`)
      controller.close()
    },
  })

  return new Response(stream, {
    headers: { "Content-Type": "text/event-stream" },
  })
})

export default router
</file>

<file path="server/src/routes/health.ts">
import { Hono } from "hono"
const router = new Hono()

router.get("/api/health", (c) =>
  c.json({ status: "ok", timestamp: Date.now() })
)

export default router
</file>

<file path="server/src/routes/podcast.ts">
import { Hono } from "hono"
import { Orchestrator } from "@/services/orchestrator.js"
import { streamText } from "hono/streaming"

const router = new Hono()

router.post("/api/task", async (c) => {
  const { prompt } = await c.req.json()
  const orch = new Orchestrator()

  return streamText(c, async (stream) => {
    const write = (line: string) => stream.write(line + "\n")

    orch.on("log", (msg) => write(`[LOG] ${msg}`))
    orch.on("sandbox_url", (url) => write(`[SANDBOX] ${url}`))
    orch.on("step_start", (s) => write(`[STEP] ${s}`))
    orch.on("step_done", ({ step, result }) =>
      write(`[DONE] ${step}: ${typeof result === "string" ? result : JSON.stringify(result)}`)
    )
    orch.on("error", ({ step, error }) => write(`[ERROR] ${step}: ${error}`))
    orch.on("done", () => write(`[COMPLETE]`))

    // await orch.initSandbox()
    const steps = await orch.plan(prompt)
    write(`[PLAN] ${JSON.stringify(steps)}`)
    // await orch.runSteps(steps, prompt)
    // await orch.close()
    stream.close()
  })
})

export default router
</file>

<file path="server/src/services/gemini-tools.ts">
import { Type } from "@google/genai"

export const runPythonTool = {
  name: "run_python_in_sandbox",
  description:
    "Executes Python code safely in a remote sandbox and returns stdout/stderr.",
  parameters: {
    type: Type.OBJECT,
    properties: {
      code: {
        type: Type.STRING,
        description: "Python code to execute inside sandbox",
      },
    },
    required: ["code"],
  },
}
</file>

<file path="server/src/services/orchestrator.ts">
import { GoogleGenAI, Type } from "@google/genai"
import { config } from "@/utils/config.js"
import { createSandbox } from "./sandbox.js"
import { runPythonTool } from "./gemini-tools.js"

export class Orchestrator {
  private ai = new GoogleGenAI({ apiKey: config.GEMINI_API_KEY })

  on(event: string, callback: (...args: any[]) => void) {
    console.log(`[on] Event registered: ${event}`)
  }
  
  async plan(prompt: string) {
    console.log(`[plan] Stub for planning: ${prompt}`)
    return ["Analyze Task", "Search News", "Generate Script"]
  }
  

  async executeWithFunctionCalling(
    prompt: string,
    opts?: { onLog?: (msg: string) => void }
  ) {
    const log = (m: string) => opts?.onLog?.(m)
  
    log(`[STEP] Sending prompt to Gemini...`)
    const tools = [{ functionDeclarations: [runPythonTool] }]
    const contents: any[] = [{ role: "user", parts: [{ text: prompt }] }]
  
    const response = await this.ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents,
      config: { tools },
    })
  
    if (!response.functionCalls?.length) {
      log(`[DONE] Gemini text-only response.`)
      return response.text ?? "(no text)"
    }
  
    const fn = response.functionCalls[0]
    log(`[FUNC] ${fn.name}`)
    log(`[ARGS] ${JSON.stringify(fn.args, null, 2)}`)
  
    if (fn.name === "run_python_in_sandbox") {
      const code = (fn.args as Record<string, any>).code
      log(`[CODE] ${code}`)
  
      const sandbox = await createSandbox()
      log(`[E2B] Sandbox started: ${sandbox.getIDEUrl ?? "(no link)"}`)
  
      const result = await sandbox.runCode(code)
      await sandbox.close()
  
      log(`[E2B_RESULT] ${JSON.stringify(result)}`)
  
      const functionResponsePart = {
        name: fn.name,
        response: { result },
      }
  
      const candidateContent = response.candidates?.[0]?.content
      if (candidateContent) contents.push(candidateContent)
  
      contents.push({
        role: "user",
        parts: [{ functionResponse: functionResponsePart } as any],
      })
  
      const final = await this.ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents,
        config: { tools },
      })
  
      return final.text ?? "(no final.text)"
    }
  
    return `Unknown function call: ${fn.name}`
  }
  
}
</file>

<file path="server/src/services/sandbox.ts">
import { Sandbox } from "@e2b/code-interpreter"
import { config } from "@/utils/config.js"

export async function createSandbox() {
  if (!config.E2B_API_KEY) {
    console.warn("[sandbox] Missing E2B_API_KEY – using MOCK sandbox.")
    return {
      async runCode(code: string) {
        return { stdout: "MOCK_SANDBOX:\n" + code, stderr: "" }
      },
      async close() {},
      getIDEUrl() {
        return undefined
      },
    }
  }

  console.log("[sandbox] Launching E2B sandbox...")
  const sandbox = await Sandbox.create({ apiKey: config.E2B_API_KEY })

  return {
    async runCode(code: string) {
      const result = await sandbox.runCode(code)
      return {
        stdout: result.logs.stdout,
        stderr: result.logs.stderr,
      }
    },
    async close() {
      // No-op for @e2b/code-interpreter
    },
    getIDEUrl() {
      // Code-interpreter doesn’t have IDE sessions
      return undefined
    },
  }
}
</file>

<file path="server/src/tests/health.test.ts">
import { Hono } from "hono"
import { Orchestrator } from "@/services/orchestrator.js"
import { createSandbox } from "@/services/sandbox.js"
import router from "@/routes/podcast.js"
import { config } from "@/utils/config.js"

// Simple test runner (no Jest yet)
async function runTests() {
  console.log("🧪 Starting backend tests...\n")

  // --- CONFIG CHECK ---
  console.log("→ Checking .env configuration")
  if (!config.PORT) throw new Error("PORT missing")
  console.log("✅ Config loaded")

  // --- SANDBOX CHECK ---
  console.log("→ Creating sandbox...")
  const sandbox = await createSandbox()
  const { stdout } = await sandbox.runCode(`print("sandbox ok")`)
  console.log("✅ Sandbox responded:", stdout.trim())
  await sandbox.close()

  // --- ORCHESTRATOR PLAN CHECK ---
  console.log("→ Running orchestrator plan()...")
  const orch = new Orchestrator()
  const steps = await orch.plan("AI chip wars")
  if (!Array.isArray(steps)) throw new Error("Plan didn't return an array")
  console.log("✅ Plan:", steps)

  // --- ROUTE CHECK (mock server) ---
  console.log("→ Verifying /api/task route with Hono...")
  const app = new Hono()
  app.route("/", router)
  const res = await app.request("/api/task", {
    method: "POST",
    body: JSON.stringify({ prompt: "AI chip wars" }),
    headers: { "Content-Type": "application/json" },
  })
  if (res.status !== 200) throw new Error(`/api/task returned ${res.status}`)
  console.log("✅ Route responded with status 200")

  console.log("\n✅ All backend checks passed.")
}

runTests().catch((err) => {
  console.error("❌ Test failed:", err)
  process.exit(1)
})
</file>

<file path="server/src/utils/config.ts">
import 'dotenv/config'

function required(name: string): string {
  const v = process.env[name]
  if (!v) throw new Error(`Missing env: ${name}`)
  return v
}

export const config = {
  PORT: Number(process.env.PORT || 3001),
  // Make these optional for dev; orchestrator will guard where needed:
  GEMINI_API_KEY: process.env.GEMINI_API_KEY || '',
  E2B_API_KEY: process.env.E2B_API_KEY || '',
  // Optional:
  ELEVENLABS_API_KEY: process.env.ELEVENLABS_API_KEY || '',
  TAVILY_API_KEY: process.env.TAVILY_API_KEY || ''
}
</file>

<file path="server/src/index.ts">
import { Hono } from "hono"
import { serve } from "@hono/node-server"
import { cors } from "hono/cors"
import router from "./routes/podcast.js"
import { config } from "./utils/config.js"
import health from "./routes/health.js"
import geminiFn from "./routes/geminiFn.js"

const app = new Hono()
app.use("/*", cors({ origin: "*", credentials: false }))

app.route("/", router)
app.route("/", health)
app.route("/", geminiFn)
serve({ fetch: app.fetch, port: config.PORT })
console.log(`Server running on :${config.PORT}`)
</file>

<file path="server/.env">
E2B_API_KEY=e2b_225a512cbf6ab6dc532384e3ef4281da9e541cc6
GEMINI_API_KEY=AIzaSyDSbG7fng92G5n7ca6FulTDKjPGKAZydCw
PORT=3001
ELEVENLABS_API_KEY=...
TAVILY_API_KEY=...
</file>

<file path="server/package.json">
{
  "name": "server",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "tsx watch src/index.ts",
    "build": "tsc",
    "test": "vitest run",
    "test:watch": "vitest",
    "start": "node dist/index.js",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@e2b/code-interpreter": "^2.1.0",
    "@google/genai": "^1.27.0",
    "@google/generative-ai": "^0.21.0",
    "@hono/node-server": "^1.19.5",
    "dotenv": "^17.2.3",
    "hono": "^4.10.3"
  },
  "devDependencies": {
    "@types/node": "^24.9.1",
    "@vitest/coverage-v8": "^4.0.3",
    "@vitest/ui": "^4.0.3",
    "tsx": "^4.19.2",
    "typescript": "^5.9.3",
    "vitest": "^4.0.3"
  }
}
</file>

<file path="server/tsconfig.json">
{
  "compilerOptions": {
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "target": "ES2022",
    "outDir": "./dist",
    "esModuleInterop": true,
    "strict": true,
    "skipLibCheck": true,
    "lib": ["ES2022"],
    "baseUrl": "./src",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["src/**/*"]
}
</file>

</files>
